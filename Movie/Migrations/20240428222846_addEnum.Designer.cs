// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movie.Data;

#nullable disable

namespace Movie.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240428222846_addEnum")]
    partial class addEnum
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Movie.Models.Booking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("ScreenId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShowDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ShowTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ScreenId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Movie.Models.Moviee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("LandscapeImagePath")
                        .HasColumnType("longtext");

                    b.Property<string>("PortraitImagePath")
                        .HasColumnType("longtext");

                    b.Property<double>("Rating")
                        .HasColumnType("double");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Movie.Models.MoviePicture", b =>
                {
                    b.Property<long>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.HasKey("ImageId");

                    b.ToTable("MoviePictures");
                });

            modelBuilder.Entity("Movie.Models.MovieSchedule", b =>
                {
                    b.Property<long>("MovieScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScreenId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShowDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ShowTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("MovieScheduleId");

                    b.HasIndex("MovieId");

                    b.HasIndex("ScreenId");

                    b.ToTable("MovieSchedules");
                });

            modelBuilder.Entity("Movie.Models.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Movie.Models.Screen", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("City")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ScreenType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Screens");
                });

            modelBuilder.Entity("Movie.Models.Seat", b =>
                {
                    b.Property<long>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<int>("Col")
                        .HasColumnType("int");

                    b.Property<long?>("MovieScheduleId")
                        .HasColumnType("bigint");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<string>("Row")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("ScreenId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SeatId");

                    b.HasIndex("BookingId");

                    b.HasIndex("MovieScheduleId");

                    b.HasIndex("ScreenId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("Movie.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("City")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Movie.Models.Booking", b =>
                {
                    b.HasOne("Movie.Models.Moviee", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie.Models.Screen", "Screen")
                        .WithMany()
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Payment");

                    b.Navigation("Screen");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movie.Models.MovieSchedule", b =>
                {
                    b.HasOne("Movie.Models.Moviee", "Movie")
                        .WithMany("MovieSchedules")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie.Models.Screen", "Screen")
                        .WithMany("MovieSchedules")
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Screen");
                });

            modelBuilder.Entity("Movie.Models.Seat", b =>
                {
                    b.HasOne("Movie.Models.Booking", null)
                        .WithMany("Seats")
                        .HasForeignKey("BookingId");

                    b.HasOne("Movie.Models.MovieSchedule", null)
                        .WithMany("NotAvailableSeats")
                        .HasForeignKey("MovieScheduleId");

                    b.HasOne("Movie.Models.Screen", null)
                        .WithMany("Seats")
                        .HasForeignKey("ScreenId");
                });

            modelBuilder.Entity("Movie.Models.Booking", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Movie.Models.Moviee", b =>
                {
                    b.Navigation("MovieSchedules");
                });

            modelBuilder.Entity("Movie.Models.MovieSchedule", b =>
                {
                    b.Navigation("NotAvailableSeats");
                });

            modelBuilder.Entity("Movie.Models.Screen", b =>
                {
                    b.Navigation("MovieSchedules");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Movie.Models.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
